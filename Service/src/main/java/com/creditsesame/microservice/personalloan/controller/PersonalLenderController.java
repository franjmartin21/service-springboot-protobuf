package com.creditsesame.microservice.personalloan.controller;


import com.creditsesame.microservice.personalloan.domain.PersonalLender;
import com.creditsesame.microservice.personalloan.protobuf.BaseMessageProtos;
import com.creditsesame.microservice.personalloan.protobuf.PersonalLenderProtos;
import com.creditsesame.microservice.personalloan.service.PersonalLenderService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
    Tipical Spring-MVC controller, RestController just means that the response is going to be @ResponseBody

    Only special thing about this controller is that responds protocol buffer instead json or xml, the classes that
    parse and un-parse the message are generated by the protobuf compiler and same classes are going to be used by
    the consumer

    STILL TO BE DONE:
    - Standarize the messages, TxtId for example always needs to be included in every message, good thing is that
      protobuf supports composition of their messages and also inheritance
    - Better methodologies to do conversion between proto objects and domain objects, in can be done in special classes
      just to manage that conversion or in 'builder' nested classes style.
    - Log printing messages
 */
@RestController
public class PersonalLenderController {

    private static final Logger log = LoggerFactory.getLogger(PersonalLenderController.class);

    @Autowired
    private PersonalLenderService personalLenderService;

    @RequestMapping("/personallender/{id}")
    PersonalLenderProtos.PersonalLender customer(@PathVariable Integer id) {
        log.info("Fetching customer with id={}", id);
        return personalLender(id);
    }

    private PersonalLenderProtos.PersonalLender personalLender(Integer id) {
        PersonalLender personalLender = personalLenderService.getCustomerById(id);
        BaseMessageProtos.BaseMessage baseMessage = BaseMessageProtos.BaseMessage.newBuilder()
                .setTxtid(34532452)
                .build();
        PersonalLenderProtos.PersonalLender PersonalLender = PersonalLenderProtos.PersonalLender.newBuilder()
                .setBasemessage(baseMessage)
                .setName(personalLender.getName())
                .build();
        return PersonalLender ;
    }
}

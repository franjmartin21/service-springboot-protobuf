package com.creditsesame.microservice.personalloan.controller;


import com.creditsesame.microservice.personalloan.domain.PersonalLender;
import com.creditsesame.microservice.personalloan.protobuf.BaseMessageProtos;
import com.creditsesame.microservice.personalloan.protobuf.PersonalLenderProtos;
import com.creditsesame.microservice.personalloan.service.PersonalLenderService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
    Tipical Spring-MVC controller, RestController just means that the response is going to be @ResponseBody

    Only special thing about this controller is that responds protocol buffer instead json or xml, the classes that
    parse and un-parse the message are generated by the protobuf compiler and same classes are going to be used by
    the consumer

    STILL TO BE DONE:
    - Standarize the messages, TxtId for example always needs to be included in every message, good thing is that
      protobuf supports composition of their messages and also inheritance
    - Better methodologies to do conversion between proto objects and domain objects, in can be done in special classes
      just to manage that conversion or in 'builder' nested classes style.
    - Log printing messages
 */
@RestController
public class PersonalLenderController {

    private static final Logger log = LoggerFactory.getLogger(PersonalLenderController.class);

    @Autowired
    private PersonalLenderService personalLenderService;

    /**
        This method is still missing the txtId that should be passed in the body or in the header, this needs to be decided
        once we get this txtId the same txtId should be used for the response instead of a new value
     */
    @RequestMapping(value = "/personallender/{id}", method = RequestMethod.GET)
    public PersonalLenderProtos.PersonalLender customer(@PathVariable Integer id) {
        log.info("Fetching customer with id={}", id);
        return convertPersonalLenderToProto(1234, personalLenderService.getCustomerById(id));
    }


    @RequestMapping(value = "/personallender/", method = RequestMethod.POST)
    public PersonalLenderProtos.PersonalLender storeLender(@RequestBody PersonalLenderProtos.PersonalLender personalLenderProto){
        log.info("Updating customer with name={}", personalLenderProto.getName());
        PersonalLender personalLender = personalLenderService.insertCustomer(convertProtoToPersonalLoan(personalLenderProto));
        return convertPersonalLenderToProto(personalLenderProto.getBasemessage().getTxtid(), personalLender);
    }

    /**
        In order to convert back and forth from domain objects to protocol buffer representation we will need converters like this one
        that could be implemented better in other 'helper' classes
     */
    private PersonalLenderProtos.PersonalLender convertPersonalLenderToProto(int txtId, PersonalLender personallender) {
        BaseMessageProtos.BaseMessage baseMessage = BaseMessageProtos.BaseMessage.newBuilder()
                .setTxtid(txtId)
                .build();
        PersonalLenderProtos.PersonalLender.Builder personalLenderProtosBuilder = PersonalLenderProtos.PersonalLender.newBuilder();
        /**
            Unfortunatelly right now protocol buffers force us to do this as setting a null value will throw a nullPointerException
         */
        personalLenderProtosBuilder.setBasemessage(baseMessage);
        personalLenderProtosBuilder.setId(personallender.getId());
        if(personallender.getName() != null) personalLenderProtosBuilder.setName(personallender.getName());
        if(personallender.getAboutText() != null) personalLenderProtosBuilder.setAboutText(personallender.getAboutText());
        if(personallender.getImageLogoUrl() != null) personalLenderProtosBuilder.setImageLogoUrl(personallender.getImageLogoUrl());
        if(personallender.getLink() != null) personalLenderProtosBuilder.setLink(personallender.getLink());

        return personalLenderProtosBuilder.build();
    }

    private PersonalLender convertProtoToPersonalLoan(PersonalLenderProtos.PersonalLender personalLenderProto){
        PersonalLender personalLender = new PersonalLender();
        personalLender.setName(personalLenderProto.getName());
        personalLender.setBullets(personalLenderProto.getBullets());
        personalLender.setImageLogoUrl(personalLenderProto.getImageLogoUrl());
        personalLender.setRightSideText(personalLenderProto.getRightSideText());
        personalLender.setLink(personalLenderProto.getLink());
        return personalLender;
    }
}
